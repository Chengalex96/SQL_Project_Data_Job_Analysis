-- Create 3 different tables, Jan/Feb/Mar 2023

CREATE TABLE january_jobs AS 
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 1;

CREATE TABLE february_jobs AS 
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 2;

CREATE TABLE march_jobs AS 
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 3;

SELECT job_posted_date
FROM march_jobs;


-- Count with IF statements
SELECT
    COUNT(job_id) AS number_of_jobs,
    CASE
        WHEN job_location = 'Anywhere' THEN 'Remote'
        WHEN job_location = 'New York, NY' THEN 'Local'
        Else 'Onsite'
    END AS location_category
FROM    
    job_postings_fact
WHERE
    job_title_short = 'Data Analyst'
GROUP BY
    location_category;

-- Categories salaries from each job posting, salaries in different buckets
-- Only data analyst roles
-- order from highest to lowest

SELECT
    COUNT(job_id) AS number_of_jobs,
    CASE
        WHEN salary_year_avg <= 75000 THEN 'Low'
        WHEN salary_year_avg >= 100000 THEN 'High'
        WHEN salary_year_avg IS NULL THEN 'Undefined'
        Else 'Standard'
    END AS salary_range
FROM    
    job_postings_fact
WHERE
    job_title_short = 'Data Analyst'
GROUP BY
    salary_range
ORDER BY    
    COUNT(job_id) DESC;

-- Subqueries (creating a small temp table)
SELECT *
FROM (
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH from job_posted_date) = 1
    ) AS january_jobs;

-- Practice Problem

SELECT
    company_id,
    name AS company_name
FROM company_dim
WHERE company_id IN(
    SELECT
        company_id
    FROM
        job_postings_fact
    WHERE
        job_no_degree_mention = true
    ORDER BY company_id
    )

-- CTEs, find companies with the most job openings
-- Get the total number of jobs postings per company id (job posting fact)
-- Return the total number of jobs with the company name (company_dim)

WITH company_job_count AS(
    SELECT
        company_id,
        Count(*) AS total_jobs
    FROM
        job_postings_fact
    GROUP BY
        company_id
    )

-- List out total number of jobs
SELECT company_dim.name AS name,
    company_job_count.total_jobs
FROM company_dim

-- Which metrics to match with
LEFT JOIN
    company_job_count ON company_job_count.company_id = company_dim.company_id
ORDER BY
    total_jobs DESC
-- Will be doing a LEFT JOIN, company dim is the table we want, B is company id used

-- Practice Problem #1
SELECT
    skill_id,
    skills AS skills_to_know
FROM skills_dim
WHERE skill_id IN(
    SELECT
        skill_id
    FROM
        skills_job_dim
    GROUP BY skill_id
    ORDER BY count(skill_id) DESC
    LIMIT 5
    )

-- Practice Problem #2
SELECT
    count(company_id),
    CASE
        WHEN num < 10 THEN 'Small'
        WHEN num > 50 THEN 'large'
        Else 'Medium'
    END AS size

FROM job_postings_fact
WHERE size IN(
    SELECT
        company_id,
        count(company_id) AS num
    FROM
        job_postings_fact
    GROUP BY company_id
    ORDER BY num DESC
    )

--Practicve PRoblem 7
-- FInd count of number of remote jobs per skill, display top 5 , add other attributes
-- COunt of jobs that exist - inenr join

WITH remote_job_skills AS(
    SELECT
        skill_id,
        count(*) AS skill_count
    FROM skills_job_dim AS skills_to_job
    INNER JOIN job_postings_fact AS job_postings ON job_postings.job_id = skills_to_job.job_id
    WHERE
        job_postings.job_work_from_home = true AND
        job_postings.job_title_short = 'Data Analyst'
    GROUP BY
        skill_id
    )

    SELECT 
        skills.skill_id,
        skills AS skill_name,
        skill_count
    FROM remote_job_skills
    INNER JOIN skills_dim AS skills ON skills.skill_id = remote_job_skills.skill_id
    ORDER BY 
        skill_count DESC
    LIMIT 5

    --Unions

-- Jobs and companies from January
SELECT
    job_title_short,
    company_id,
    job_location
FROM 
    january_jobs

UNION ALL

SELECT
    job_title_short,
    company_id,
    job_location
FROM 
    february_jobs

UNION ALL

SELECT
    job_title_short,
    company_id,
    job_location
FROM 
    march_jobs


-- Problem 8

SELECT 
    quarter1_job_postings.job_title_short,
    quarter1_job_postings.job_location,
    quarter1_job_postings.job_via,
    quarter1_job_postings.job_posted_date::DATE,
    quarter1_job_postings.salary_year_avg
FROM(
    SELECT *
    FROM january_jobs
    UNION ALL
    SELECT * 
    FROM february_jobs
    UNION ALL
    SELECT * 
    FROM march_jobs
) AS quarter1_job_postings
WHERE   
    quarter1_job_postings.salary_year_avg > 70000 AND
    quarter1_job_postings.job_title_short = 'Data Analyst'
ORDER BY    
    quarter1_job_postings.salary_year_avg DESC